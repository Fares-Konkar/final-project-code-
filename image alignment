import cv2
import numpy as np

# refernces image:
img1 = cv2.imread(r'.jpg')
# image to be compared with:
img2 = cv2.imread(r'.jpg') 

# scale the imges to 60%:
scale_percent = 100 # percent of original size
# img1
width1 = int(img1.shape[1] * scale_percent / 100)
height1 = int(img1.shape[0] * scale_percent / 100)
dim1 = (width1, height1)
# img2
width2 = int(img1.shape[1] * scale_percent / 100)
height2 = int(img1.shape[0] * scale_percent / 100)
dim2 = (width2, height2)
# the resized version of the images:
img1 = cv2.resize(img1, dim1, interpolation = cv2.INTER_AREA)
img2 = cv2.resize(img2, dim2, interpolation = cv2.INTER_AREA)

# colored to gray:
img_1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
img_2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

# initiate orb, whitch detect as much features as it could.
orb = cv2.ORB_create()
kp1, des1 = orb.detectAndCompute(img_1, None)
kp2, des2 = orb.detectAndCompute(img_2, None)

# apply the key point to both images
img1_orb = cv2.drawKeypoints(img_1, kp1, None, flags=None)
img2_orb = cv2.drawKeypoints(img_2, kp2, None, flags=None)

# match the keypoint from each image
matcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)
matches = matcher.match(des1,des2,None)
matches = sorted(matches, key= lambda x:x.distance)

# this image shows the mathes keypoint and draw a line to each one:
img3 = cv2.drawMatches(img_1, kp1, img_2, kp2, matches[:10], None)

# reject the none matched points using homography:
points1 = np.zeros((len(matches),2), dtype=np.float32)
points2 = np.zeros((len(matches),2), dtype=np.float32)

# homograhpy:
for i, match in enumerate(matches):
    points1[i,:]= kp1[match.queryIdx].pt
    points2[i,:]= kp2[match.trainIdx].pt
    
# h is the homography matrix 
h, mask = cv2.findHomography(points1, points2, cv2.RANSAC,5.0)

'''
RANSAC is a method to keep the inline points and delet the outliers
'''

# img3 is img2 wraped from keypoints thats matches img1
height,width, channels= img1.shape
img3 = cv2.warpPerspective(img1, h, (width,height))

cv2.imshow('image_1',img1_orb)
cv2.imshow('image_2',img2_orb)
cv2.imshow('image_3',img3)
cv2.waitKey(0)
cv2.destroyAllWindows()

